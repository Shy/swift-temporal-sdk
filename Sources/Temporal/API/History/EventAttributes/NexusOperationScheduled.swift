//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Temporal SDK open source project
//
// Copyright (c) 2025 Apple Inc. and the Swift Temporal SDK project authors
// Licensed under MIT License
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Swift Temporal SDK project authors
//
// SPDX-License-Identifier: MIT
//
//===----------------------------------------------------------------------===//

extension HistoryEvent.Attributes {
    /// Event marking that an operation was scheduled by a workflow via the ScheduleNexusOperation command.
    public struct NexusOperationScheduled: Hashable, Sendable {
        /// Endpoint name, must exist in the endpoint registry.
        public var endpoint: String

        /// Service name.
        public var service: String

        /// Operation name.
        public var operation: String

        /// Input for the operation.
        ///
        /// The server converts this into Nexus request content and the appropriate content headers internally when sending the StartOperation request. On the handler side, if it is also backed by Temporal, the content is transformed back to the original Payload stored in this event.
        public var input: TemporalPayload

        /// Schedule-to-close timeout for this operation.
        ///
        /// Indicates how long the caller is willing to wait for operation completion. Calls are retried internally by the server.
        public var scheduleToCloseTimeout: Duration?

        /// Header to attach to the Nexus request.
        ///
        /// Note these headers are not the same as Temporal headers on internal activities and child workflows, these are transmitted to Nexus operations that may be external and are not traditional payloads.
        public var nexusHeader: [String: String]

        /// The `WORKFLOW_TASK_COMPLETED` event that the corresponding ScheduleNexusOperation command was reported with.
        public var workflowTaskCompletedEventID: Int

        /// A unique ID generated by the history service upon creation of this event.
        ///
        /// The ID will be transmitted with all nexus StartOperation requests and is used as an idempotentency key.
        public var requestID: String

        /// Endpoint ID as resolved in the endpoint registry at the time this event was generated.
        ///
        /// This is stored on the event and used internally by the server in case the endpoint is renamed from the time the event was originally scheduled.
        public var endpointID: String

        /// Creates event attributes for when a Nexus operation has been scheduled.
        public init(
            endpoint: String,
            service: String,
            operation: String,
            input: TemporalPayload,
            scheduleToCloseTimeout: Duration? = nil,
            nexusHeader: [String: String] = [:],
            workflowTaskCompletedEventID: Int,
            requestID: String,
            endpointID: String
        ) {
            self.endpoint = endpoint
            self.service = service
            self.operation = operation
            self.input = input
            self.scheduleToCloseTimeout = scheduleToCloseTimeout
            self.nexusHeader = nexusHeader
            self.workflowTaskCompletedEventID = workflowTaskCompletedEventID
            self.requestID = requestID
            self.endpointID = endpointID
        }
    }
}
